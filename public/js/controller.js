// Generated by CoffeeScript 1.12.3
(function() {
  this.controller = {
    element: new Object,
    init: function(argument) {
      this.element_();
      this.elements_();
      return this.vk_();
    },
    element_: function() {
      return this.element = {
        add: function() {
          if (picker.element.add()) {
            return net.element.add();
          }
        },
        read: function() {
          return net.element.read();
        },
        field: {
          append: function() {
            var obj;
            if (env.element.add.field.c === window.O4.pp.element.add.field.range_count[0]) {
              document.getElementById('elementFieldRemove').style.display = 'block';
            }
            env.element.add.field.c += 1;
            obj = document.getElementById('style--' + window.O4.pp.element.add.field.id_prefix + env.element.add.field.c);
            obj.style.display = 'list-item';
            if (env.element.add.field.c >= window.O4.pp.element.add.field.range_count[1]) {
              return document.getElementById('elementFieldAppend').style.display = 'none';
            }
          },
          remove: function() {
            var field, obj;
            if (env.element.add.field.c === window.O4.pp.element.add.field.range_count[1]) {
              document.getElementById('elementFieldAppend').style.display = 'block';
            }
            field = window.O4.pp.element.add.field.id_prefix + env.element.add.field.c;
            obj = document.getElementById('style--' + field);
            obj.style.display = 'none';
            obj = document.getElementById(field);
            obj.value = '';
            if (state.element.add.field.range_length[field] !== void 0) {
              obj.removeEventListener('keyup', window[field], false);
              state.element.add.field.range_length[field] = void 0;
              error.element.add.field.range_length(obj, false);
            }
            env.element.add.field.c -= 1;
            if (env.element.add.field.c <= window.O4.pp.element.add.field.range_count[0]) {
              return document.getElementById('elementFieldRemove').style.display = 'none';
            }
          }
        }
      };
    },
    elements_: function() {
      return this.elements = {
        read: function() {
          if (!state.response) {
            net.elements.read();
          }
          env.elements.read = env.response;
          picker.elements.read();
          alert(state.response);
          if (state.elements.read) {
            return ui.elements.read.show();
          }
          return error.elements.read();
        }
      };
    },
    vk_: function() {
      return this.vk = {
        auth: function() {
          return net.vk.auth();
        }
      };
    },
    test_json: function() {
      return net.test_json();
    }
  };

}).call(this);
